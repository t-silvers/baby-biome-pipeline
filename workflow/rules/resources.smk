"""Generate analysis resources.

If no samplesheet (`'resources/samplesheet.csv'`) provided, uses information 
provided in the config files (sample info, sequencing info, FASTQs directory, 
...) to generate an analysis samplesheet. Logs samples in a databases, where 
unique sample IDs are generated by incrementing new samples or fetching the ID 
for samples already in the database.

Usage example:

  snakemake <all_resources>
"""

sequencing_records = resources / 'sequencing.duckdb'

sequencing_runs = list(config['data']['generated']['sequencing'].keys())


localrules:
    all_FASTQs,
    stage_transform_FASTQs,
    load_FASTQs,

wildcard_constraints:
    seqrun = '|'.join(sequencing_runs)


rule taxprofiler_samplesheet:
    input:
        db=sequencing_records,
    output:
        samplesheet='resources/samplesheets/taxprofiler.csv',
    params:
        samplesheet=output['samplesheet'],
        # NOTE: Must conform to EBI ENA controlled vocabulary
        instrument_platform='ILLUMINA',
    log:
        'logs/smk/taxprofiler_samplesheet.log'
    run:
        transform(
            models['nfcore_inputs']['taxprofiler'],
            params, db=input['db'], log=log[0], readonly=True
        )


# PHONY
rule all_FASTQs:
    input:
        expand(
            resources / 'seqrun={seqrun}/fastqs.csv',
            seqrun=sequencing_runs
        )


rule stage_transform_FASTQs:
    output:
        staged=resources / 'seqrun={seqrun}/fastqs-raw.csv',
        transformed=resources / 'seqrun={seqrun}/fastqs.csv',
    params:
        glob=lambda wildcards: config['data']['generated']['sequencing'][wildcards.seqrun]['fastqs'],
        pat=lambda wildcards: config['data']['generated']['sequencing'][wildcards.seqrun]['pat'],
        staged=output['staged'],
        transformed=output['transformed'],
    log:
        stage='logs/smk/stage_FASTQs_{seqrun}.log',
        transform='logs/smk/transform_FASTQs_{seqrun}.log'
    run:
        for step in ['stage', 'transform']:
            transform(models['fastqs'][step], params, log=log[step])


rule load_FASTQs:
    input:
        rules.all_FASTQs.input
    output:
        db=update(sequencing_records)
    params:
        glob=resources / 'seqrun=*/fastqs.csv',
    log:
        'logs/smk/load_FASTQs.log'
    run:
        transform(models['fastqs']['load'], params, db=output['db'], log=log[0])